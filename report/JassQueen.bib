
@misc{graf_jassen_nodate,
	title = {Jassen auf {Basis} der {Spieltheorie}},
	url = {https://dwolleb.ch/jass/},
	language = {de-CH},
	urldate = {2023-12-22},
	author = {Graf, Daniel},
	file = {Jassen_auf_Basis_der_Spieltheorie-Daniel_Graf.pdf:/home/joel/Zotero/storage/PFXXIQ4S/Jassen_auf_Basis_der_Spieltheorie-Daniel_Graf.pdf:application/pdf},
}

@article{cowling_information_2012,
	title = {Information {Set} {Monte} {Carlo} {Tree} {Search}},
	volume = {4},
	issn = {1943-0698},
	url = {https://ieeexplore.ieee.org/document/6203567},
	doi = {10.1109/TCIAIG.2012.2200894},
	abstract = {Monte Carlo tree search (MCTS) is an AI technique that has been successfully applied to many deterministic games of perfect information. This paper investigates the application of MCTS methods to games with hidden information and uncertainty. In particular, three new information set MCTS (ISMCTS) algorithms are presented which handle different sources of hidden information and uncertainty in games. Instead of searching minimax trees of game states, the ISMCTS algorithms search trees of information sets, more directly analyzing the true structure of the game. These algorithms are tested in three domains with different characteristics, and it is demonstrated that our new algorithms outperform existing approaches to handling hidden information and uncertainty in games.},
	number = {2},
	urldate = {2023-12-22},
	journal = {IEEE Transactions on Computational Intelligence and AI in Games},
	author = {Cowling, Peter I. and Powley, Edward J. and Whitehouse, Daniel},
	month = jun,
	year = {2012},
	note = {Conference Name: IEEE Transactions on Computational Intelligence and AI in Games},
	pages = {120--143},
	file = {Accepted Version:/home/joel/Zotero/storage/HR8ZWPDG/Cowling et al. - 2012 - Information Set Monte Carlo Tree Search.pdf:application/pdf},
}

@misc{silver_mastering_2017,
	title = {Mastering {Chess} and {Shogi} by {Self}-{Play} with a {General} {Reinforcement} {Learning} {Algorithm}},
	url = {http://arxiv.org/abs/1712.01815},
	doi = {10.48550/arXiv.1712.01815},
	abstract = {The game of chess is the most widely-studied domain in the history of artificial intelligence. The strongest programs are based on a combination of sophisticated search techniques, domain-specific adaptations, and handcrafted evaluation functions that have been refined by human experts over several decades. In contrast, the AlphaGo Zero program recently achieved superhuman performance in the game of Go, by tabula rasa reinforcement learning from games of self-play. In this paper, we generalise this approach into a single AlphaZero algorithm that can achieve, tabula rasa, superhuman performance in many challenging domains. Starting from random play, and given no domain knowledge except the game rules, AlphaZero achieved within 24 hours a superhuman level of play in the games of chess and shogi (Japanese chess) as well as Go, and convincingly defeated a world-champion program in each case.},
	urldate = {2023-12-22},
	publisher = {arXiv},
	author = {Silver, David and Hubert, Thomas and Schrittwieser, Julian and Antonoglou, Ioannis and Lai, Matthew and Guez, Arthur and Lanctot, Marc and Sifre, Laurent and Kumaran, Dharshan and Graepel, Thore and Lillicrap, Timothy and Simonyan, Karen and Hassabis, Demis},
	month = dec,
	year = {2017},
	note = {arXiv:1712.01815 [cs]},
	keywords = {Computer Science - Artificial Intelligence, Computer Science - Machine Learning},
	file = {arXiv Fulltext PDF:/home/joel/Zotero/storage/PGY9YG7V/Silver et al. - 2017 - Mastering Chess and Shogi by Self-Play with a Gene.pdf:application/pdf},
}

@incollection{hutchison_parallel_2008,
	address = {Berlin, Heidelberg},
	title = {Parallel {Monte}-{Carlo} {Tree} {Search}},
	volume = {5131},
	isbn = {978-3-540-87607-6 978-3-540-87608-3},
	url = {http://link.springer.com/10.1007/978-3-540-87608-3_6},
	abstract = {Monte-Carlo Tree Search (MCTS) is a new best-ﬁrst search method that started a revolution in the ﬁeld of Computer Go. Parallelizing MCTS is an important way to increase the strength of any Go program. In this article, we discuss three parallelization methods for MCTS: leaf parallelization, root parallelization, and tree parallelization. To be eﬀective tree parallelization requires two techniques: adequately handling of (1) local mutexes and (2) virtual loss. Experiments in 13 × 13 Go reveal that in the program Mango root parallelization may lead to the best results for a speciﬁc time setting and speciﬁc program parameters. However, as soon as the selection mechanism is able to handle more adequately the balance of exploitation and exploration, tree parallelization should have attention too and could become a second choice for parallelizing MCTS. Preliminary experiments on the smaller 9 × 9 board provide promising prospects for tree parallelization.},
	language = {en},
	urldate = {2023-12-22},
	booktitle = {Computers and {Games}},
	publisher = {Springer Berlin Heidelberg},
	author = {Chaslot, Guillaume M. J. -B. and Winands, Mark H. M. and Van Den Herik, H. Jaap},
	editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Van Den Herik, H. Jaap and Xu, Xinhe and Ma, Zongmin and Winands, Mark H. M.},
	year = {2008},
	doi = {10.1007/978-3-540-87608-3_6},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {60--71},
	file = {Chaslot et al. - 2008 - Parallel Monte-Carlo Tree Search.pdf:/home/joel/Zotero/storage/Q5LVEMZV/Chaslot et al. - 2008 - Parallel Monte-Carlo Tree Search.pdf:application/pdf},
}

@article{cazenave_parallelization_nodate,
	title = {On the {Parallelization} of {UCT}},
	abstract = {We present three parallel algorithms for UCT. For 9×9 Go, they all improve the results of the programs that use them against GNU GO 3.6. The simplest one, the single-run algorithm, uses very few communications and shows improvements comparable to the more complex ones. Further improvements may be possible sharing more information in the multiple-runs algorithm.},
	language = {en},
	author = {Cazenave, Tristan and Jouandeau, Nicolas},
	file = {Cazenave and Jouandeau - On the Parallelization of UCT.pdf:/home/joel/Zotero/storage/LSNIAXCK/Cazenave and Jouandeau - On the Parallelization of UCT.pdf:application/pdf},
}

@misc{noauthor_dvclive_nodate,
	title = {{DVCLive}},
	url = {https://dvc.org/doc/dvclive},
	abstract = {Open-source version control system for Data Science and Machine Learning projects. Git-like experience to organize your data, models, and experiments.},
	language = {en},
	urldate = {2023-12-22},
	journal = {Data Version Control · DVC},
}

@misc{noauthor_data_nodate,
	title = {Data {Version} {Control} · {DVC}},
	url = {https://dvc.org/},
	abstract = {Open-source version control system for Data Science and Machine Learning projects. Git-like experience to organize your data, models, and experiments.},
	language = {en},
	urldate = {2023-12-22},
	journal = {Data Version Control · DVC},
}

@misc{noauthor_dvc_nodate,
	title = {{DVC} {Pipelines}},
	url = {https://dvc.org/doc/user-guide/pipelines},
	abstract = {Open-source version control system for Data Science and Machine Learning projects. Git-like experience to organize your data, models, and experiments.},
	language = {en},
	urldate = {2023-12-22},
	journal = {Data Version Control · DVC},
}

@misc{noauthor_gymnasium_nodate,
	title = {Gymnasium {Documentation}},
	url = {https://gymnasium.farama.org/index.html},
	abstract = {A standard API for reinforcement learning and a diverse set of reference environments (formerly Gym)},
	language = {en},
	urldate = {2023-12-22},
}
